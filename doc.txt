Collegamento tra JavaScript e database SQL Server:
ho valutato la possibilità di collegare direttamente il file JavaScript al database SQL Server per leggere i dati in tempo reale. pero' ho notato che i browser (come Chrome o Edge) non hanno i permessi per connettersi direttamente a un database. quindi Un file HTML o JavaScript in esecuzione nel browser può leggere solo file locali (come CSV o JSON).

quindi ho deciso che :
con Node.js Vado nel database, eseguo la query e porto i dati al browser (in formato Json)
con AlaSQL prendo i dati in formato json e li filtro e li aggrego come in SQL.
		



AlaSQL --> lavora dentro la pagina web -->
	cosa fa:
	Legge e filtra dati che hai già nel computer o nel browser (es. da file CSV o JSON). Non può parlare con un database vero, 		per motivi di sicurezza.

Chart.js--> lavora dentro la pagina web -->
	  cosa fa:
	  legge e filtra dati (come in SQL) direttamente con JavaScript nel browser

Node.js -->lavora sul computer come server -->
	cosa fa:
	Può connettersi direttamente al database SQL Server, eseguire query e poi inviare i risultati al browser (dove AlaSQL e Chart.js li 	usano per grafici).


flusso si esecuzione:

1) SQL Server (origine dei dati) :
qui ci sono tutte le tue tabelle (VENDITA, PRODOTTO, ...) Node.js fa una query SQL per estrarre solo i campi che ci servono (es. IdVendita, Provincia, Prezzo, Quantita, Tessera, CodiceSconto ...)
Il risultato di questa query viene convertito in JSON.

2) Node.js (ponte / server) :
Node riceve i dati dal database.Li manda al browser tramite una “porta” web → esempio: http://localhost:3000/data .A questo punto, i dati sono disponibili in formato JSON e leggibili da JavaScript nel browser.

3)Browser + JavaScript (file script.js) :  
i calcoli si fanno qui -->
fetch('http://localhost:3000/data')
  .then(res => res.json())
  .then(rows => {
    // qui JS riceve i dati
    // 🧮 3a) calcola sconti, totali, ricavi, ecc.
    // 🎨 3b) li passa ad AlaSQL o Chart.js per visualizzare
  });

4) AlaSQL + Chart.js (visualizzazione):
Una volta che script.js ha finito i calcoli, i dati sono pronti .
AlaSQL può:
const perProvincia = alasql('SELECT Provincia, SUM(Totale) AS Ricavo FROM ? GROUP BY Provincia', [rows]);

E Chart.js disegna il grafico:
new Chart(document.getElementById('grafico'), {
  type: 'bar',
  data: { labels: [...], datasets: [...] }
});
